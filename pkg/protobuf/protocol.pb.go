// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.2
// source: protocol.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TopicId int32

const (
	// Dart
	TopicId_T_Report                          TopicId = 0
	TopicId_T_Footnote                        TopicId = 1
	TopicId_T_Bond                            TopicId = 2
	TopicId_T_CommercialPaperSecuritiesUnpaid TopicId = 3
	TopicId_T_CorporateBondUnpaid             TopicId = 4
	TopicId_T_ShortTermBondUnpaid             TopicId = 5
	// Kind
	TopicId_T_Disclosure TopicId = 6
	// KRX
	TopicId_T_Indices          TopicId = 7
	TopicId_T_IndexComposition TopicId = 8
	TopicId_T_IndexPrice       TopicId = 9
	TopicId_T_Price            TopicId = 10
)

// Enum value maps for TopicId.
var (
	TopicId_name = map[int32]string{
		0:  "T_Report",
		1:  "T_Footnote",
		2:  "T_Bond",
		3:  "T_CommercialPaperSecuritiesUnpaid",
		4:  "T_CorporateBondUnpaid",
		5:  "T_ShortTermBondUnpaid",
		6:  "T_Disclosure",
		7:  "T_Indices",
		8:  "T_IndexComposition",
		9:  "T_IndexPrice",
		10: "T_Price",
	}
	TopicId_value = map[string]int32{
		"T_Report":                          0,
		"T_Footnote":                        1,
		"T_Bond":                            2,
		"T_CommercialPaperSecuritiesUnpaid": 3,
		"T_CorporateBondUnpaid":             4,
		"T_ShortTermBondUnpaid":             5,
		"T_Disclosure":                      6,
		"T_Indices":                         7,
		"T_IndexComposition":                8,
		"T_IndexPrice":                      9,
		"T_Price":                           10,
	}
)

func (x TopicId) Enum() *TopicId {
	p := new(TopicId)
	*p = x
	return p
}

func (x TopicId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicId) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[0].Descriptor()
}

func (TopicId) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[0]
}

func (x TopicId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicId.Descriptor instead.
func (TopicId) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RceptNo       string `protobuf:"bytes,1,opt,name=rceptNo,proto3" json:"rceptNo,omitempty"`
	ReprtCode     string `protobuf:"bytes,2,opt,name=reprtCode,proto3" json:"reprtCode,omitempty"`
	BsnsYear      string `protobuf:"bytes,3,opt,name=bsnsYear,proto3" json:"bsnsYear,omitempty"`
	CorpCode      string `protobuf:"bytes,4,opt,name=corpCode,proto3" json:"corpCode,omitempty"`
	SjDiv         string `protobuf:"bytes,5,opt,name=sjDiv,proto3" json:"sjDiv,omitempty"`
	SjNm          string `protobuf:"bytes,6,opt,name=sjNm,proto3" json:"sjNm,omitempty"`
	AccountId     string `protobuf:"bytes,7,opt,name=accountId,proto3" json:"accountId,omitempty"`
	AccountNm     string `protobuf:"bytes,8,opt,name=accountNm,proto3" json:"accountNm,omitempty"`
	AccountDetail string `protobuf:"bytes,9,opt,name=accountDetail,proto3" json:"accountDetail,omitempty"`
	ThstrmNm      string `protobuf:"bytes,10,opt,name=thstrmNm,proto3" json:"thstrmNm,omitempty"`
	ThstrmAmount  string `protobuf:"bytes,11,opt,name=thstrmAmount,proto3" json:"thstrmAmount,omitempty"`
	StockName     string `protobuf:"bytes,12,opt,name=stockName,proto3" json:"stockName,omitempty"`
	StockCode     string `protobuf:"bytes,13,opt,name=stockCode,proto3" json:"stockCode,omitempty"`
	FsDiv         string `protobuf:"bytes,14,opt,name=fsDiv,proto3" json:"fsDiv,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *Report) GetRceptNo() string {
	if x != nil {
		return x.RceptNo
	}
	return ""
}

func (x *Report) GetReprtCode() string {
	if x != nil {
		return x.ReprtCode
	}
	return ""
}

func (x *Report) GetBsnsYear() string {
	if x != nil {
		return x.BsnsYear
	}
	return ""
}

func (x *Report) GetCorpCode() string {
	if x != nil {
		return x.CorpCode
	}
	return ""
}

func (x *Report) GetSjDiv() string {
	if x != nil {
		return x.SjDiv
	}
	return ""
}

func (x *Report) GetSjNm() string {
	if x != nil {
		return x.SjNm
	}
	return ""
}

func (x *Report) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Report) GetAccountNm() string {
	if x != nil {
		return x.AccountNm
	}
	return ""
}

func (x *Report) GetAccountDetail() string {
	if x != nil {
		return x.AccountDetail
	}
	return ""
}

func (x *Report) GetThstrmNm() string {
	if x != nil {
		return x.ThstrmNm
	}
	return ""
}

func (x *Report) GetThstrmAmount() string {
	if x != nil {
		return x.ThstrmAmount
	}
	return ""
}

func (x *Report) GetStockName() string {
	if x != nil {
		return x.StockName
	}
	return ""
}

func (x *Report) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *Report) GetFsDiv() string {
	if x != nil {
		return x.FsDiv
	}
	return ""
}

type Footnote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RcpNo     string `protobuf:"bytes,1,opt,name=rcpNo,proto3" json:"rcpNo,omitempty"`
	CorpCode  string `protobuf:"bytes,2,opt,name=corpCode,proto3" json:"corpCode,omitempty"`
	StockCode string `protobuf:"bytes,3,opt,name=stockCode,proto3" json:"stockCode,omitempty"`
	BsnsYear  string `protobuf:"bytes,4,opt,name=bsnsYear,proto3" json:"bsnsYear,omitempty"`
	ReprtCode string `protobuf:"bytes,5,opt,name=reprtCode,proto3" json:"reprtCode,omitempty"`
	Remark1   string `protobuf:"bytes,6,opt,name=remark1,proto3" json:"remark1,omitempty"`
	Remark2   string `protobuf:"bytes,7,opt,name=remark2,proto3" json:"remark2,omitempty"`
	Remark3   string `protobuf:"bytes,8,opt,name=remark3,proto3" json:"remark3,omitempty"`
	Remark4   string `protobuf:"bytes,9,opt,name=remark4,proto3" json:"remark4,omitempty"`
}

func (x *Footnote) Reset() {
	*x = Footnote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Footnote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Footnote) ProtoMessage() {}

func (x *Footnote) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Footnote.ProtoReflect.Descriptor instead.
func (*Footnote) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *Footnote) GetRcpNo() string {
	if x != nil {
		return x.RcpNo
	}
	return ""
}

func (x *Footnote) GetCorpCode() string {
	if x != nil {
		return x.CorpCode
	}
	return ""
}

func (x *Footnote) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *Footnote) GetBsnsYear() string {
	if x != nil {
		return x.BsnsYear
	}
	return ""
}

func (x *Footnote) GetReprtCode() string {
	if x != nil {
		return x.ReprtCode
	}
	return ""
}

func (x *Footnote) GetRemark1() string {
	if x != nil {
		return x.Remark1
	}
	return ""
}

func (x *Footnote) GetRemark2() string {
	if x != nil {
		return x.Remark2
	}
	return ""
}

func (x *Footnote) GetRemark3() string {
	if x != nil {
		return x.Remark3
	}
	return ""
}

func (x *Footnote) GetRemark4() string {
	if x != nil {
		return x.Remark4
	}
	return ""
}

type Bond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RceptNo       string `protobuf:"bytes,1,opt,name=rceptNo,proto3" json:"rceptNo,omitempty"`
	CorpCls       string `protobuf:"bytes,2,opt,name=corpCls,proto3" json:"corpCls,omitempty"`
	CorpCode      string `protobuf:"bytes,3,opt,name=corpCode,proto3" json:"corpCode,omitempty"`
	CorpName      string `protobuf:"bytes,4,opt,name=corpName,proto3" json:"corpName,omitempty"`
	IsuCmpny      string `protobuf:"bytes,5,opt,name=isuCmpny,proto3" json:"isuCmpny,omitempty"`
	ScritsKndNm   string `protobuf:"bytes,6,opt,name=scritsKndNm,proto3" json:"scritsKndNm,omitempty"`
	IsuMthNm      string `protobuf:"bytes,7,opt,name=isuMthNm,proto3" json:"isuMthNm,omitempty"`
	IsuDe         string `protobuf:"bytes,8,opt,name=isuDe,proto3" json:"isuDe,omitempty"`
	FacvaluTotamt string `protobuf:"bytes,9,opt,name=facvaluTotamt,proto3" json:"facvaluTotamt,omitempty"`
	Intrt         string `protobuf:"bytes,10,opt,name=intrt,proto3" json:"intrt,omitempty"`
	EvlGradInstt  string `protobuf:"bytes,11,opt,name=evlGradInstt,proto3" json:"evlGradInstt,omitempty"`
	Mtd           string `protobuf:"bytes,12,opt,name=mtd,proto3" json:"mtd,omitempty"`
	RepyAt        string `protobuf:"bytes,13,opt,name=repyAt,proto3" json:"repyAt,omitempty"`
	MngtCmpny     string `protobuf:"bytes,14,opt,name=mngtCmpny,proto3" json:"mngtCmpny,omitempty"`
	StockCode     string `protobuf:"bytes,15,opt,name=stockCode,proto3" json:"stockCode,omitempty"`
	BsnsYear      string `protobuf:"bytes,16,opt,name=bsnsYear,proto3" json:"bsnsYear,omitempty"`
	ReprtCode     string `protobuf:"bytes,17,opt,name=reprtCode,proto3" json:"reprtCode,omitempty"`
}

func (x *Bond) Reset() {
	*x = Bond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bond) ProtoMessage() {}

func (x *Bond) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bond.ProtoReflect.Descriptor instead.
func (*Bond) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *Bond) GetRceptNo() string {
	if x != nil {
		return x.RceptNo
	}
	return ""
}

func (x *Bond) GetCorpCls() string {
	if x != nil {
		return x.CorpCls
	}
	return ""
}

func (x *Bond) GetCorpCode() string {
	if x != nil {
		return x.CorpCode
	}
	return ""
}

func (x *Bond) GetCorpName() string {
	if x != nil {
		return x.CorpName
	}
	return ""
}

func (x *Bond) GetIsuCmpny() string {
	if x != nil {
		return x.IsuCmpny
	}
	return ""
}

func (x *Bond) GetScritsKndNm() string {
	if x != nil {
		return x.ScritsKndNm
	}
	return ""
}

func (x *Bond) GetIsuMthNm() string {
	if x != nil {
		return x.IsuMthNm
	}
	return ""
}

func (x *Bond) GetIsuDe() string {
	if x != nil {
		return x.IsuDe
	}
	return ""
}

func (x *Bond) GetFacvaluTotamt() string {
	if x != nil {
		return x.FacvaluTotamt
	}
	return ""
}

func (x *Bond) GetIntrt() string {
	if x != nil {
		return x.Intrt
	}
	return ""
}

func (x *Bond) GetEvlGradInstt() string {
	if x != nil {
		return x.EvlGradInstt
	}
	return ""
}

func (x *Bond) GetMtd() string {
	if x != nil {
		return x.Mtd
	}
	return ""
}

func (x *Bond) GetRepyAt() string {
	if x != nil {
		return x.RepyAt
	}
	return ""
}

func (x *Bond) GetMngtCmpny() string {
	if x != nil {
		return x.MngtCmpny
	}
	return ""
}

func (x *Bond) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *Bond) GetBsnsYear() string {
	if x != nil {
		return x.BsnsYear
	}
	return ""
}

func (x *Bond) GetReprtCode() string {
	if x != nil {
		return x.ReprtCode
	}
	return ""
}

type CommercialPaperSecuritiesUnpaid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RceptNo              string `protobuf:"bytes,1,opt,name=rceptNo,proto3" json:"rceptNo,omitempty"`
	CorpCls              string `protobuf:"bytes,2,opt,name=corpCls,proto3" json:"corpCls,omitempty"`
	CorpCode             string `protobuf:"bytes,3,opt,name=corpCode,proto3" json:"corpCode,omitempty"`
	CorpName             string `protobuf:"bytes,4,opt,name=corpName,proto3" json:"corpName,omitempty"`
	Sm                   string `protobuf:"bytes,5,opt,name=sm,proto3" json:"sm,omitempty"`
	RemndrExprtn1        string `protobuf:"bytes,6,opt,name=remndrExprtn1,proto3" json:"remndrExprtn1,omitempty"`
	RemndrExprtn2        string `protobuf:"bytes,7,opt,name=remndrExprtn2,proto3" json:"remndrExprtn2,omitempty"`
	De10Below            string `protobuf:"bytes,8,opt,name=de10Below,proto3" json:"de10Below,omitempty"`
	De10ExcessDe30Below  string `protobuf:"bytes,9,opt,name=de10ExcessDe30Below,proto3" json:"de10ExcessDe30Below,omitempty"`
	De30ExcessDe90Below  string `protobuf:"bytes,10,opt,name=de30ExcessDe90Below,proto3" json:"de30ExcessDe90Below,omitempty"`
	De90ExcessDe180Below string `protobuf:"bytes,11,opt,name=de90ExcessDe180Below,proto3" json:"de90ExcessDe180Below,omitempty"`
	De180ExcessYy1Below  string `protobuf:"bytes,12,opt,name=de180ExcessYy1Below,proto3" json:"de180ExcessYy1Below,omitempty"`
	Yy1ExcessYy2Below    string `protobuf:"bytes,13,opt,name=yy1ExcessYy2Below,proto3" json:"yy1ExcessYy2Below,omitempty"`
	Yy2ExcessYy3Below    string `protobuf:"bytes,14,opt,name=yy2ExcessYy3Below,proto3" json:"yy2ExcessYy3Below,omitempty"`
	Yy3Excess            string `protobuf:"bytes,15,opt,name=yy3Excess,proto3" json:"yy3Excess,omitempty"`
	StockCode            string `protobuf:"bytes,16,opt,name=stockCode,proto3" json:"stockCode,omitempty"`
	BsnsYear             string `protobuf:"bytes,17,opt,name=bsnsYear,proto3" json:"bsnsYear,omitempty"`
}

func (x *CommercialPaperSecuritiesUnpaid) Reset() {
	*x = CommercialPaperSecuritiesUnpaid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommercialPaperSecuritiesUnpaid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommercialPaperSecuritiesUnpaid) ProtoMessage() {}

func (x *CommercialPaperSecuritiesUnpaid) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommercialPaperSecuritiesUnpaid.ProtoReflect.Descriptor instead.
func (*CommercialPaperSecuritiesUnpaid) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *CommercialPaperSecuritiesUnpaid) GetRceptNo() string {
	if x != nil {
		return x.RceptNo
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetCorpCls() string {
	if x != nil {
		return x.CorpCls
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetCorpCode() string {
	if x != nil {
		return x.CorpCode
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetCorpName() string {
	if x != nil {
		return x.CorpName
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetSm() string {
	if x != nil {
		return x.Sm
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetRemndrExprtn1() string {
	if x != nil {
		return x.RemndrExprtn1
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetRemndrExprtn2() string {
	if x != nil {
		return x.RemndrExprtn2
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetDe10Below() string {
	if x != nil {
		return x.De10Below
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetDe10ExcessDe30Below() string {
	if x != nil {
		return x.De10ExcessDe30Below
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetDe30ExcessDe90Below() string {
	if x != nil {
		return x.De30ExcessDe90Below
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetDe90ExcessDe180Below() string {
	if x != nil {
		return x.De90ExcessDe180Below
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetDe180ExcessYy1Below() string {
	if x != nil {
		return x.De180ExcessYy1Below
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetYy1ExcessYy2Below() string {
	if x != nil {
		return x.Yy1ExcessYy2Below
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetYy2ExcessYy3Below() string {
	if x != nil {
		return x.Yy2ExcessYy3Below
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetYy3Excess() string {
	if x != nil {
		return x.Yy3Excess
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *CommercialPaperSecuritiesUnpaid) GetBsnsYear() string {
	if x != nil {
		return x.BsnsYear
	}
	return ""
}

type CorporateBondUnpaid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RceptNo            string `protobuf:"bytes,1,opt,name=rceptNo,proto3" json:"rceptNo,omitempty"`
	CorpCls            string `protobuf:"bytes,2,opt,name=corpCls,proto3" json:"corpCls,omitempty"`
	CorpCode           string `protobuf:"bytes,3,opt,name=corpCode,proto3" json:"corpCode,omitempty"`
	CorpName           string `protobuf:"bytes,4,opt,name=corpName,proto3" json:"corpName,omitempty"`
	Sm                 string `protobuf:"bytes,5,opt,name=sm,proto3" json:"sm,omitempty"`
	RemndrExprtn1      string `protobuf:"bytes,6,opt,name=remndrExprtn1,proto3" json:"remndrExprtn1,omitempty"`
	RemndrExprtn2      string `protobuf:"bytes,7,opt,name=remndrExprtn2,proto3" json:"remndrExprtn2,omitempty"`
	Yy1ExcessYy2Below  string `protobuf:"bytes,8,opt,name=yy1ExcessYy2Below,proto3" json:"yy1ExcessYy2Below,omitempty"`
	Yy2ExcessYy3Below  string `protobuf:"bytes,9,opt,name=yy2ExcessYy3Below,proto3" json:"yy2ExcessYy3Below,omitempty"`
	Yy1Below           string `protobuf:"bytes,10,opt,name=yy1Below,proto3" json:"yy1Below,omitempty"`
	Yy3ExcessYy4Below  string `protobuf:"bytes,11,opt,name=yy3ExcessYy4Below,proto3" json:"yy3ExcessYy4Below,omitempty"`
	Yy4ExcessYy5Below  string `protobuf:"bytes,12,opt,name=yy4ExcessYy5Below,proto3" json:"yy4ExcessYy5Below,omitempty"`
	Yy5ExcessYy10Below string `protobuf:"bytes,13,opt,name=yy5ExcessYy10Below,proto3" json:"yy5ExcessYy10Below,omitempty"`
	Yy10Excess         string `protobuf:"bytes,14,opt,name=yy10Excess,proto3" json:"yy10Excess,omitempty"`
	StockCode          string `protobuf:"bytes,15,opt,name=stockCode,proto3" json:"stockCode,omitempty"`
	BsnsYear           string `protobuf:"bytes,16,opt,name=bsnsYear,proto3" json:"bsnsYear,omitempty"`
}

func (x *CorporateBondUnpaid) Reset() {
	*x = CorporateBondUnpaid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorporateBondUnpaid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorporateBondUnpaid) ProtoMessage() {}

func (x *CorporateBondUnpaid) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorporateBondUnpaid.ProtoReflect.Descriptor instead.
func (*CorporateBondUnpaid) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *CorporateBondUnpaid) GetRceptNo() string {
	if x != nil {
		return x.RceptNo
	}
	return ""
}

func (x *CorporateBondUnpaid) GetCorpCls() string {
	if x != nil {
		return x.CorpCls
	}
	return ""
}

func (x *CorporateBondUnpaid) GetCorpCode() string {
	if x != nil {
		return x.CorpCode
	}
	return ""
}

func (x *CorporateBondUnpaid) GetCorpName() string {
	if x != nil {
		return x.CorpName
	}
	return ""
}

func (x *CorporateBondUnpaid) GetSm() string {
	if x != nil {
		return x.Sm
	}
	return ""
}

func (x *CorporateBondUnpaid) GetRemndrExprtn1() string {
	if x != nil {
		return x.RemndrExprtn1
	}
	return ""
}

func (x *CorporateBondUnpaid) GetRemndrExprtn2() string {
	if x != nil {
		return x.RemndrExprtn2
	}
	return ""
}

func (x *CorporateBondUnpaid) GetYy1ExcessYy2Below() string {
	if x != nil {
		return x.Yy1ExcessYy2Below
	}
	return ""
}

func (x *CorporateBondUnpaid) GetYy2ExcessYy3Below() string {
	if x != nil {
		return x.Yy2ExcessYy3Below
	}
	return ""
}

func (x *CorporateBondUnpaid) GetYy1Below() string {
	if x != nil {
		return x.Yy1Below
	}
	return ""
}

func (x *CorporateBondUnpaid) GetYy3ExcessYy4Below() string {
	if x != nil {
		return x.Yy3ExcessYy4Below
	}
	return ""
}

func (x *CorporateBondUnpaid) GetYy4ExcessYy5Below() string {
	if x != nil {
		return x.Yy4ExcessYy5Below
	}
	return ""
}

func (x *CorporateBondUnpaid) GetYy5ExcessYy10Below() string {
	if x != nil {
		return x.Yy5ExcessYy10Below
	}
	return ""
}

func (x *CorporateBondUnpaid) GetYy10Excess() string {
	if x != nil {
		return x.Yy10Excess
	}
	return ""
}

func (x *CorporateBondUnpaid) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *CorporateBondUnpaid) GetBsnsYear() string {
	if x != nil {
		return x.BsnsYear
	}
	return ""
}

type ShortTermBondUnpaid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RceptNo              string `protobuf:"bytes,1,opt,name=rceptNo,proto3" json:"rceptNo,omitempty"`
	CorpCls              string `protobuf:"bytes,2,opt,name=corpCls,proto3" json:"corpCls,omitempty"`
	CorpCode             string `protobuf:"bytes,3,opt,name=corpCode,proto3" json:"corpCode,omitempty"`
	CorpName             string `protobuf:"bytes,4,opt,name=corpName,proto3" json:"corpName,omitempty"`
	Sm                   string `protobuf:"bytes,5,opt,name=sm,proto3" json:"sm,omitempty"`
	RemndrExprtn1        string `protobuf:"bytes,6,opt,name=remndrExprtn1,proto3" json:"remndrExprtn1,omitempty"`
	RemndrExprtn2        string `protobuf:"bytes,7,opt,name=remndrExprtn2,proto3" json:"remndrExprtn2,omitempty"`
	De10Below            string `protobuf:"bytes,8,opt,name=de10Below,proto3" json:"de10Below,omitempty"`
	De10ExcessDe30Below  string `protobuf:"bytes,9,opt,name=de10ExcessDe30Below,proto3" json:"de10ExcessDe30Below,omitempty"`
	De30ExcessDe90Below  string `protobuf:"bytes,10,opt,name=de30ExcessDe90Below,proto3" json:"de30ExcessDe90Below,omitempty"`
	De90ExcessDe180Below string `protobuf:"bytes,11,opt,name=de90ExcessDe180Below,proto3" json:"de90ExcessDe180Below,omitempty"`
	De180ExcessYy1Below  string `protobuf:"bytes,12,opt,name=de180ExcessYy1Below,proto3" json:"de180ExcessYy1Below,omitempty"`
	IsuLmt               string `protobuf:"bytes,13,opt,name=isuLmt,proto3" json:"isuLmt,omitempty"`
	RemndrLmt            string `protobuf:"bytes,14,opt,name=remndrLmt,proto3" json:"remndrLmt,omitempty"`
	StockCode            string `protobuf:"bytes,15,opt,name=stockCode,proto3" json:"stockCode,omitempty"`
	BsnsYear             string `protobuf:"bytes,16,opt,name=bsnsYear,proto3" json:"bsnsYear,omitempty"`
}

func (x *ShortTermBondUnpaid) Reset() {
	*x = ShortTermBondUnpaid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortTermBondUnpaid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortTermBondUnpaid) ProtoMessage() {}

func (x *ShortTermBondUnpaid) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortTermBondUnpaid.ProtoReflect.Descriptor instead.
func (*ShortTermBondUnpaid) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{5}
}

func (x *ShortTermBondUnpaid) GetRceptNo() string {
	if x != nil {
		return x.RceptNo
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetCorpCls() string {
	if x != nil {
		return x.CorpCls
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetCorpCode() string {
	if x != nil {
		return x.CorpCode
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetCorpName() string {
	if x != nil {
		return x.CorpName
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetSm() string {
	if x != nil {
		return x.Sm
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetRemndrExprtn1() string {
	if x != nil {
		return x.RemndrExprtn1
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetRemndrExprtn2() string {
	if x != nil {
		return x.RemndrExprtn2
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetDe10Below() string {
	if x != nil {
		return x.De10Below
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetDe10ExcessDe30Below() string {
	if x != nil {
		return x.De10ExcessDe30Below
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetDe30ExcessDe90Below() string {
	if x != nil {
		return x.De30ExcessDe90Below
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetDe90ExcessDe180Below() string {
	if x != nil {
		return x.De90ExcessDe180Below
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetDe180ExcessYy1Below() string {
	if x != nil {
		return x.De180ExcessYy1Below
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetIsuLmt() string {
	if x != nil {
		return x.IsuLmt
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetRemndrLmt() string {
	if x != nil {
		return x.RemndrLmt
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *ShortTermBondUnpaid) GetBsnsYear() string {
	if x != nil {
		return x.BsnsYear
	}
	return ""
}

type Disclosure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisclosureTime string `protobuf:"bytes,1,opt,name=disclosureTime,proto3" json:"disclosureTime,omitempty"`
	StockNm        string `protobuf:"bytes,2,opt,name=stockNm,proto3" json:"stockNm,omitempty"`
	Reason         string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	RcptNo         string `protobuf:"bytes,4,opt,name=rcptNo,proto3" json:"rcptNo,omitempty"`
	StockCode      string `protobuf:"bytes,5,opt,name=stockCode,proto3" json:"stockCode,omitempty"`
	DocNo          string `protobuf:"bytes,6,opt,name=docNo,proto3" json:"docNo,omitempty"`
	DetailUrl      string `protobuf:"bytes,7,opt,name=detailUrl,proto3" json:"detailUrl,omitempty"`
	Detail         string `protobuf:"bytes,8,opt,name=detail,proto3" json:"detail,omitempty"`
	DisclosureData string `protobuf:"bytes,9,opt,name=disclosureData,proto3" json:"disclosureData,omitempty"`
}

func (x *Disclosure) Reset() {
	*x = Disclosure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disclosure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disclosure) ProtoMessage() {}

func (x *Disclosure) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disclosure.ProtoReflect.Descriptor instead.
func (*Disclosure) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *Disclosure) GetDisclosureTime() string {
	if x != nil {
		return x.DisclosureTime
	}
	return ""
}

func (x *Disclosure) GetStockNm() string {
	if x != nil {
		return x.StockNm
	}
	return ""
}

func (x *Disclosure) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Disclosure) GetRcptNo() string {
	if x != nil {
		return x.RcptNo
	}
	return ""
}

func (x *Disclosure) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *Disclosure) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *Disclosure) GetDetailUrl() string {
	if x != nil {
		return x.DetailUrl
	}
	return ""
}

func (x *Disclosure) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *Disclosure) GetDisclosureData() string {
	if x != nil {
		return x.DisclosureData
	}
	return ""
}

type Indices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsuCd            string `protobuf:"bytes,1,opt,name=isuCd,proto3" json:"isuCd,omitempty"`
	IsuAbbr          string `protobuf:"bytes,2,opt,name=isuAbbr,proto3" json:"isuAbbr,omitempty"`
	Prsntprc         int32  `protobuf:"varint,3,opt,name=prsntprc,proto3" json:"prsntprc,omitempty"`
	CmpprevddFlucTp1 int32  `protobuf:"varint,4,opt,name=cmpprevddFlucTp1,proto3" json:"cmpprevddFlucTp1,omitempty"`
	CmpprevddPrc     int32  `protobuf:"varint,5,opt,name=cmpprevddPrc,proto3" json:"cmpprevddPrc,omitempty"`
	FlucRt           int32  `protobuf:"varint,6,opt,name=flucRt,proto3" json:"flucRt,omitempty"`
	Askord           int32  `protobuf:"varint,7,opt,name=askord,proto3" json:"askord,omitempty"`
	Bidord           int32  `protobuf:"varint,8,opt,name=bidord,proto3" json:"bidord,omitempty"`
	Trdvol           int32  `protobuf:"varint,9,opt,name=trdvol,proto3" json:"trdvol,omitempty"`
	Trdval           int64  `protobuf:"varint,10,opt,name=trdval,proto3" json:"trdval,omitempty"`
	Opnprc           int32  `protobuf:"varint,11,opt,name=opnprc,proto3" json:"opnprc,omitempty"`
	Hgprc            int32  `protobuf:"varint,12,opt,name=hgprc,proto3" json:"hgprc,omitempty"`
	Lwprc            int32  `protobuf:"varint,13,opt,name=lwprc,proto3" json:"lwprc,omitempty"`
	Parval           int32  `protobuf:"varint,14,opt,name=parval,proto3" json:"parval,omitempty"`
	ListshrCnt       int32  `protobuf:"varint,15,opt,name=listshrCnt,proto3" json:"listshrCnt,omitempty"`
	ListMktcap       int32  `protobuf:"varint,16,opt,name=listMktcap,proto3" json:"listMktcap,omitempty"`
	Indices          int32  `protobuf:"varint,17,opt,name=indices,proto3" json:"indices,omitempty"`
	UpdateDate       string `protobuf:"bytes,18,opt,name=updateDate,proto3" json:"updateDate,omitempty"`
}

func (x *Indices) Reset() {
	*x = Indices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Indices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Indices) ProtoMessage() {}

func (x *Indices) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Indices.ProtoReflect.Descriptor instead.
func (*Indices) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *Indices) GetIsuCd() string {
	if x != nil {
		return x.IsuCd
	}
	return ""
}

func (x *Indices) GetIsuAbbr() string {
	if x != nil {
		return x.IsuAbbr
	}
	return ""
}

func (x *Indices) GetPrsntprc() int32 {
	if x != nil {
		return x.Prsntprc
	}
	return 0
}

func (x *Indices) GetCmpprevddFlucTp1() int32 {
	if x != nil {
		return x.CmpprevddFlucTp1
	}
	return 0
}

func (x *Indices) GetCmpprevddPrc() int32 {
	if x != nil {
		return x.CmpprevddPrc
	}
	return 0
}

func (x *Indices) GetFlucRt() int32 {
	if x != nil {
		return x.FlucRt
	}
	return 0
}

func (x *Indices) GetAskord() int32 {
	if x != nil {
		return x.Askord
	}
	return 0
}

func (x *Indices) GetBidord() int32 {
	if x != nil {
		return x.Bidord
	}
	return 0
}

func (x *Indices) GetTrdvol() int32 {
	if x != nil {
		return x.Trdvol
	}
	return 0
}

func (x *Indices) GetTrdval() int64 {
	if x != nil {
		return x.Trdval
	}
	return 0
}

func (x *Indices) GetOpnprc() int32 {
	if x != nil {
		return x.Opnprc
	}
	return 0
}

func (x *Indices) GetHgprc() int32 {
	if x != nil {
		return x.Hgprc
	}
	return 0
}

func (x *Indices) GetLwprc() int32 {
	if x != nil {
		return x.Lwprc
	}
	return 0
}

func (x *Indices) GetParval() int32 {
	if x != nil {
		return x.Parval
	}
	return 0
}

func (x *Indices) GetListshrCnt() int32 {
	if x != nil {
		return x.ListshrCnt
	}
	return 0
}

func (x *Indices) GetListMktcap() int32 {
	if x != nil {
		return x.ListMktcap
	}
	return 0
}

func (x *Indices) GetIndices() int32 {
	if x != nil {
		return x.Indices
	}
	return 0
}

func (x *Indices) GetUpdateDate() string {
	if x != nil {
		return x.UpdateDate
	}
	return ""
}

type IndexComposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsuSrtCd   string `protobuf:"bytes,1,opt,name=isuSrtCd,proto3" json:"isuSrtCd,omitempty"`
	IsuAbbrv   string `protobuf:"bytes,2,opt,name=isuAbbrv,proto3" json:"isuAbbrv,omitempty"`
	TddClsPrc  int32  `protobuf:"varint,3,opt,name=tddClsPrc,proto3" json:"tddClsPrc,omitempty"`
	FlucTpCd   int32  `protobuf:"varint,4,opt,name=flucTpCd,proto3" json:"flucTpCd,omitempty"`
	StrCmpPrc  int32  `protobuf:"varint,5,opt,name=strCmpPrc,proto3" json:"strCmpPrc,omitempty"`
	FlucRt     int32  `protobuf:"varint,6,opt,name=flucRt,proto3" json:"flucRt,omitempty"`
	MktCap     int64  `protobuf:"varint,7,opt,name=mktCap,proto3" json:"mktCap,omitempty"`
	UpdateDate string `protobuf:"bytes,8,opt,name=updateDate,proto3" json:"updateDate,omitempty"`
	Rank       int32  `protobuf:"varint,9,opt,name=rank,proto3" json:"rank,omitempty"`
	Index      string `protobuf:"bytes,10,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *IndexComposition) Reset() {
	*x = IndexComposition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexComposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexComposition) ProtoMessage() {}

func (x *IndexComposition) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexComposition.ProtoReflect.Descriptor instead.
func (*IndexComposition) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8}
}

func (x *IndexComposition) GetIsuSrtCd() string {
	if x != nil {
		return x.IsuSrtCd
	}
	return ""
}

func (x *IndexComposition) GetIsuAbbrv() string {
	if x != nil {
		return x.IsuAbbrv
	}
	return ""
}

func (x *IndexComposition) GetTddClsPrc() int32 {
	if x != nil {
		return x.TddClsPrc
	}
	return 0
}

func (x *IndexComposition) GetFlucTpCd() int32 {
	if x != nil {
		return x.FlucTpCd
	}
	return 0
}

func (x *IndexComposition) GetStrCmpPrc() int32 {
	if x != nil {
		return x.StrCmpPrc
	}
	return 0
}

func (x *IndexComposition) GetFlucRt() int32 {
	if x != nil {
		return x.FlucRt
	}
	return 0
}

func (x *IndexComposition) GetMktCap() int64 {
	if x != nil {
		return x.MktCap
	}
	return 0
}

func (x *IndexComposition) GetUpdateDate() string {
	if x != nil {
		return x.UpdateDate
	}
	return ""
}

func (x *IndexComposition) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *IndexComposition) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

type IndexPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdxNm        string  `protobuf:"bytes,1,opt,name=idxNm,proto3" json:"idxNm,omitempty"`
	ClsprcIdx    float64 `protobuf:"fixed64,2,opt,name=clsprcIdx,proto3" json:"clsprcIdx,omitempty"`
	FlucTpCd     int32   `protobuf:"varint,3,opt,name=flucTpCd,proto3" json:"flucTpCd,omitempty"`
	CmpprevddIdx float64 `protobuf:"fixed64,4,opt,name=cmpprevddIdx,proto3" json:"cmpprevddIdx,omitempty"`
	FlucRt       float64 `protobuf:"fixed64,5,opt,name=flucRt,proto3" json:"flucRt,omitempty"`
	OpnprcIdx    float64 `protobuf:"fixed64,6,opt,name=opnprcIdx,proto3" json:"opnprcIdx,omitempty"`
	HgprcIdx     float64 `protobuf:"fixed64,7,opt,name=hgprcIdx,proto3" json:"hgprcIdx,omitempty"`
	LwprcIdx     float64 `protobuf:"fixed64,8,opt,name=lwprcIdx,proto3" json:"lwprcIdx,omitempty"`
	AccTrdvol    int32   `protobuf:"varint,9,opt,name=accTrdvol,proto3" json:"accTrdvol,omitempty"`
	AccTrdval    int64   `protobuf:"varint,10,opt,name=accTrdval,proto3" json:"accTrdval,omitempty"`
	Mktcap       int64   `protobuf:"varint,11,opt,name=mktcap,proto3" json:"mktcap,omitempty"`
	UpdateDate   string  `protobuf:"bytes,12,opt,name=updateDate,proto3" json:"updateDate,omitempty"`
	Market       string  `protobuf:"bytes,13,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *IndexPrice) Reset() {
	*x = IndexPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexPrice) ProtoMessage() {}

func (x *IndexPrice) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexPrice.ProtoReflect.Descriptor instead.
func (*IndexPrice) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{9}
}

func (x *IndexPrice) GetIdxNm() string {
	if x != nil {
		return x.IdxNm
	}
	return ""
}

func (x *IndexPrice) GetClsprcIdx() float64 {
	if x != nil {
		return x.ClsprcIdx
	}
	return 0
}

func (x *IndexPrice) GetFlucTpCd() int32 {
	if x != nil {
		return x.FlucTpCd
	}
	return 0
}

func (x *IndexPrice) GetCmpprevddIdx() float64 {
	if x != nil {
		return x.CmpprevddIdx
	}
	return 0
}

func (x *IndexPrice) GetFlucRt() float64 {
	if x != nil {
		return x.FlucRt
	}
	return 0
}

func (x *IndexPrice) GetOpnprcIdx() float64 {
	if x != nil {
		return x.OpnprcIdx
	}
	return 0
}

func (x *IndexPrice) GetHgprcIdx() float64 {
	if x != nil {
		return x.HgprcIdx
	}
	return 0
}

func (x *IndexPrice) GetLwprcIdx() float64 {
	if x != nil {
		return x.LwprcIdx
	}
	return 0
}

func (x *IndexPrice) GetAccTrdvol() int32 {
	if x != nil {
		return x.AccTrdvol
	}
	return 0
}

func (x *IndexPrice) GetAccTrdval() int64 {
	if x != nil {
		return x.AccTrdval
	}
	return 0
}

func (x *IndexPrice) GetMktcap() int64 {
	if x != nil {
		return x.Mktcap
	}
	return 0
}

func (x *IndexPrice) GetUpdateDate() string {
	if x != nil {
		return x.UpdateDate
	}
	return ""
}

func (x *IndexPrice) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockCode            string `protobuf:"bytes,1,opt,name=stockCode,proto3" json:"stockCode,omitempty"`
	StockFullName        string `protobuf:"bytes,2,opt,name=stockFullName,proto3" json:"stockFullName,omitempty"`
	Classify             string `protobuf:"bytes,3,opt,name=classify,proto3" json:"classify,omitempty"`
	StockClassify        string `protobuf:"bytes,4,opt,name=stockClassify,proto3" json:"stockClassify,omitempty"`
	ClosingPrice         int32  `protobuf:"varint,5,opt,name=closingPrice,proto3" json:"closingPrice,omitempty"`
	Prepare              int32  `protobuf:"varint,6,opt,name=prepare,proto3" json:"prepare,omitempty"`
	FluctuationRate      int32  `protobuf:"varint,7,opt,name=fluctuationRate,proto3" json:"fluctuationRate,omitempty"`
	OpenPrice            int32  `protobuf:"varint,8,opt,name=openPrice,proto3" json:"openPrice,omitempty"`
	HighPrice            int32  `protobuf:"varint,9,opt,name=highPrice,proto3" json:"highPrice,omitempty"`
	LowPrice             int32  `protobuf:"varint,10,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`
	TradingVolume        int32  `protobuf:"varint,11,opt,name=tradingVolume,proto3" json:"tradingVolume,omitempty"`
	TransactionAmount    int32  `protobuf:"varint,12,opt,name=transactionAmount,proto3" json:"transactionAmount,omitempty"`
	MarketCap            int64  `protobuf:"varint,13,opt,name=marketCap,proto3" json:"marketCap,omitempty"`
	NumberOfListedShares int32  `protobuf:"varint,14,opt,name=numberOfListedShares,proto3" json:"numberOfListedShares,omitempty"`
	UpdateDate           string `protobuf:"bytes,15,opt,name=updateDate,proto3" json:"updateDate,omitempty"`
}

func (x *Price) Reset() {
	*x = Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{10}
}

func (x *Price) GetStockCode() string {
	if x != nil {
		return x.StockCode
	}
	return ""
}

func (x *Price) GetStockFullName() string {
	if x != nil {
		return x.StockFullName
	}
	return ""
}

func (x *Price) GetClassify() string {
	if x != nil {
		return x.Classify
	}
	return ""
}

func (x *Price) GetStockClassify() string {
	if x != nil {
		return x.StockClassify
	}
	return ""
}

func (x *Price) GetClosingPrice() int32 {
	if x != nil {
		return x.ClosingPrice
	}
	return 0
}

func (x *Price) GetPrepare() int32 {
	if x != nil {
		return x.Prepare
	}
	return 0
}

func (x *Price) GetFluctuationRate() int32 {
	if x != nil {
		return x.FluctuationRate
	}
	return 0
}

func (x *Price) GetOpenPrice() int32 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *Price) GetHighPrice() int32 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *Price) GetLowPrice() int32 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *Price) GetTradingVolume() int32 {
	if x != nil {
		return x.TradingVolume
	}
	return 0
}

func (x *Price) GetTransactionAmount() int32 {
	if x != nil {
		return x.TransactionAmount
	}
	return 0
}

func (x *Price) GetMarketCap() int64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *Price) GetNumberOfListedShares() int32 {
	if x != nil {
		return x.NumberOfListedShares
	}
	return 0
}

func (x *Price) GetUpdateDate() string {
	if x != nil {
		return x.UpdateDate
	}
	return ""
}

var File_protocol_proto protoreflect.FileDescriptor

var file_protocol_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x96, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x72, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x72, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x73, 0x6e, 0x73, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x73, 0x6e, 0x73, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x6a, 0x44, 0x69, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6a, 0x44, 0x69,
	0x76, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6a, 0x4e, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6a, 0x4e, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x73, 0x74, 0x72,
	0x6d, 0x4e, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x73, 0x74, 0x72,
	0x6d, 0x4e, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x68, 0x73, 0x74, 0x72, 0x6d, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x73, 0x74, 0x72,
	0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x73, 0x44, 0x69, 0x76, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x73, 0x44, 0x69, 0x76, 0x22, 0xfc, 0x01, 0x0a, 0x08, 0x46, 0x6f,
	0x6f, 0x74, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x63, 0x70, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x63, 0x70, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x72, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x72, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x73, 0x6e, 0x73, 0x59, 0x65,
	0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x73, 0x6e, 0x73, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x33, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x33, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x34, 0x22, 0xe2, 0x03, 0x0a, 0x04, 0x42, 0x6f, 0x6e,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x72, 0x70, 0x43, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x72, 0x70, 0x43, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x75, 0x43, 0x6d, 0x70, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x73, 0x75, 0x43, 0x6d, 0x70, 0x6e, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x72,
	0x69, 0x74, 0x73, 0x4b, 0x6e, 0x64, 0x4e, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x63, 0x72, 0x69, 0x74, 0x73, 0x4b, 0x6e, 0x64, 0x4e, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x75, 0x4d, 0x74, 0x68, 0x4e, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x73, 0x75, 0x4d, 0x74, 0x68, 0x4e, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x75, 0x44, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x75, 0x44, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x61, 0x63, 0x76, 0x61, 0x6c, 0x75, 0x54, 0x6f, 0x74, 0x61, 0x6d, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x76, 0x61, 0x6c, 0x75, 0x54, 0x6f, 0x74,
	0x61, 0x6d, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x76, 0x6c,
	0x47, 0x72, 0x61, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x76, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x74, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x74, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x79, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x70, 0x79, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6e, 0x67, 0x74, 0x43,
	0x6d, 0x70, 0x6e, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6e, 0x67, 0x74,
	0x43, 0x6d, 0x70, 0x6e, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x73, 0x6e, 0x73, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x73, 0x6e, 0x73, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x05,
	0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x70, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x6e, 0x70, 0x61, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x72, 0x70, 0x43, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x72, 0x70, 0x43, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x73, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6d, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x6d, 0x6e, 0x64, 0x72, 0x45, 0x78, 0x70, 0x72, 0x74, 0x6e, 0x31, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6e, 0x64, 0x72, 0x45, 0x78, 0x70, 0x72,
	0x74, 0x6e, 0x31, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6e, 0x64, 0x72, 0x45, 0x78, 0x70,
	0x72, 0x74, 0x6e, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6e,
	0x64, 0x72, 0x45, 0x78, 0x70, 0x72, 0x74, 0x6e, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x31,
	0x30, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65,
	0x31, 0x30, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x31, 0x30, 0x45,
	0x78, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x33, 0x30, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x31, 0x30, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73,
	0x44, 0x65, 0x33, 0x30, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x33,
	0x30, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x39, 0x30, 0x42, 0x65, 0x6c, 0x6f, 0x77,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x33, 0x30, 0x45, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x39, 0x30, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x14, 0x64,
	0x65, 0x39, 0x30, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x31, 0x38, 0x30, 0x42, 0x65,
	0x6c, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x39, 0x30, 0x45,
	0x78, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x31, 0x38, 0x30, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12,
	0x30, 0x0a, 0x13, 0x64, 0x65, 0x31, 0x38, 0x30, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x59, 0x79,
	0x31, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65,
	0x31, 0x38, 0x30, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x59, 0x79, 0x31, 0x42, 0x65, 0x6c, 0x6f,
	0x77, 0x12, 0x2c, 0x0a, 0x11, 0x79, 0x79, 0x31, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x59, 0x79,
	0x32, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x79, 0x79,
	0x31, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x59, 0x79, 0x32, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12,
	0x2c, 0x0a, 0x11, 0x79, 0x79, 0x32, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x59, 0x79, 0x33, 0x42,
	0x65, 0x6c, 0x6f, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x79, 0x79, 0x32, 0x45,
	0x78, 0x63, 0x65, 0x73, 0x73, 0x59, 0x79, 0x33, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12, 0x1c, 0x0a,
	0x09, 0x79, 0x79, 0x33, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x79, 0x79, 0x33, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x73, 0x6e,
	0x73, 0x59, 0x65, 0x61, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x73, 0x6e,
	0x73, 0x59, 0x65, 0x61, 0x72, 0x22, 0xbb, 0x04, 0x0a, 0x13, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72,
	0x61, 0x74, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x55, 0x6e, 0x70, 0x61, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x70, 0x43,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x70, 0x43, 0x6c,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d,
	0x6e, 0x64, 0x72, 0x45, 0x78, 0x70, 0x72, 0x74, 0x6e, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6e, 0x64, 0x72, 0x45, 0x78, 0x70, 0x72, 0x74, 0x6e, 0x31, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6e, 0x64, 0x72, 0x45, 0x78, 0x70, 0x72, 0x74, 0x6e, 0x32,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6e, 0x64, 0x72, 0x45, 0x78,
	0x70, 0x72, 0x74, 0x6e, 0x32, 0x12, 0x2c, 0x0a, 0x11, 0x79, 0x79, 0x31, 0x45, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x59, 0x79, 0x32, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x79, 0x79, 0x31, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x59, 0x79, 0x32, 0x42, 0x65,
	0x6c, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x11, 0x79, 0x79, 0x32, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73,
	0x59, 0x79, 0x33, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x79, 0x79, 0x32, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x59, 0x79, 0x33, 0x42, 0x65, 0x6c, 0x6f,
	0x77, 0x12, 0x1a, 0x0a, 0x08, 0x79, 0x79, 0x31, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x79, 0x31, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12, 0x2c, 0x0a,
	0x11, 0x79, 0x79, 0x33, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x59, 0x79, 0x34, 0x42, 0x65, 0x6c,
	0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x79, 0x79, 0x33, 0x45, 0x78, 0x63,
	0x65, 0x73, 0x73, 0x59, 0x79, 0x34, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x11, 0x79,
	0x79, 0x34, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x59, 0x79, 0x35, 0x42, 0x65, 0x6c, 0x6f, 0x77,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x79, 0x79, 0x34, 0x45, 0x78, 0x63, 0x65, 0x73,
	0x73, 0x59, 0x79, 0x35, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x12, 0x79, 0x79, 0x35,
	0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x59, 0x79, 0x31, 0x30, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x79, 0x79, 0x35, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73,
	0x59, 0x79, 0x31, 0x30, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x79, 0x31,
	0x30, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x79,
	0x79, 0x31, 0x30, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x73, 0x6e, 0x73, 0x59,
	0x65, 0x61, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x73, 0x6e, 0x73, 0x59,
	0x65, 0x61, 0x72, 0x22, 0xb5, 0x04, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x42, 0x6f, 0x6e, 0x64, 0x55, 0x6e, 0x70, 0x61, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x70, 0x43, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x70, 0x43, 0x6c, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6e, 0x64,
	0x72, 0x45, 0x78, 0x70, 0x72, 0x74, 0x6e, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x6d, 0x6e, 0x64, 0x72, 0x45, 0x78, 0x70, 0x72, 0x74, 0x6e, 0x31, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x6d, 0x6e, 0x64, 0x72, 0x45, 0x78, 0x70, 0x72, 0x74, 0x6e, 0x32, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6e, 0x64, 0x72, 0x45, 0x78, 0x70, 0x72,
	0x74, 0x6e, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x31, 0x30, 0x42, 0x65, 0x6c, 0x6f, 0x77,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x31, 0x30, 0x42, 0x65, 0x6c, 0x6f,
	0x77, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x31, 0x30, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x44,
	0x65, 0x33, 0x30, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x64, 0x65, 0x31, 0x30, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x33, 0x30, 0x42, 0x65,
	0x6c, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x33, 0x30, 0x45, 0x78, 0x63, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x39, 0x30, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x64, 0x65, 0x33, 0x30, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x39, 0x30,
	0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x39, 0x30, 0x45, 0x78, 0x63,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x31, 0x38, 0x30, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x39, 0x30, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x44,
	0x65, 0x31, 0x38, 0x30, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x31,
	0x38, 0x30, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x59, 0x79, 0x31, 0x42, 0x65, 0x6c, 0x6f, 0x77,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x31, 0x38, 0x30, 0x45, 0x78, 0x63,
	0x65, 0x73, 0x73, 0x59, 0x79, 0x31, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x75, 0x4c, 0x6d, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x75,
	0x4c, 0x6d, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6e, 0x64, 0x72, 0x4c, 0x6d, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6e, 0x64, 0x72, 0x4c, 0x6d,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x73, 0x6e, 0x73, 0x59, 0x65, 0x61, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x73, 0x6e, 0x73, 0x59, 0x65, 0x61, 0x72, 0x22, 0x90, 0x02, 0x0a, 0x0a,
	0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x63, 0x70, 0x74, 0x4e, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x63, 0x70, 0x74, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f,
	0x63, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf3,
	0x03, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73,
	0x75, 0x43, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x75, 0x43, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x75, 0x41, 0x62, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x73, 0x75, 0x41, 0x62, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x73, 0x6e, 0x74, 0x70, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x73, 0x6e, 0x74, 0x70, 0x72, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6d, 0x70, 0x70, 0x72, 0x65,
	0x76, 0x64, 0x64, 0x46, 0x6c, 0x75, 0x63, 0x54, 0x70, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x63, 0x6d, 0x70, 0x70, 0x72, 0x65, 0x76, 0x64, 0x64, 0x46, 0x6c, 0x75, 0x63, 0x54,
	0x70, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6d, 0x70, 0x70, 0x72, 0x65, 0x76, 0x64, 0x64, 0x50,
	0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6d, 0x70, 0x70, 0x72, 0x65,
	0x76, 0x64, 0x64, 0x50, 0x72, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x75, 0x63, 0x52, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6c, 0x75, 0x63, 0x52, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x73, 0x6b, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x61, 0x73, 0x6b, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x64, 0x6f, 0x72, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x69, 0x64, 0x6f, 0x72, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x72, 0x64, 0x76, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x72, 0x64, 0x76, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x64, 0x76, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x72, 0x64, 0x76, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x70, 0x6e, 0x70, 0x72, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x70, 0x6e, 0x70, 0x72, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x67, 0x70, 0x72, 0x63, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x68, 0x67, 0x70, 0x72, 0x63, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x77, 0x70, 0x72, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x77, 0x70,
	0x72, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x68, 0x72, 0x43, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x68, 0x72, 0x43, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69,
	0x73, 0x74, 0x4d, 0x6b, 0x74, 0x63, 0x61, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6c, 0x69, 0x73, 0x74, 0x4d, 0x6b, 0x74, 0x63, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x75,
	0x53, 0x72, 0x74, 0x43, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x75,
	0x53, 0x72, 0x74, 0x43, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x75, 0x41, 0x62, 0x62, 0x72,
	0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x75, 0x41, 0x62, 0x62, 0x72,
	0x76, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x64, 0x64, 0x43, 0x6c, 0x73, 0x50, 0x72, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x64, 0x64, 0x43, 0x6c, 0x73, 0x50, 0x72, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x75, 0x63, 0x54, 0x70, 0x43, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x66, 0x6c, 0x75, 0x63, 0x54, 0x70, 0x43, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x43, 0x6d, 0x70, 0x50, 0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x72, 0x43, 0x6d, 0x70, 0x50, 0x72, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x75,
	0x63, 0x52, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6c, 0x75, 0x63, 0x52,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6b, 0x74, 0x43, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6d, 0x6b, 0x74, 0x43, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xfa, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x78, 0x4e, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x64, 0x78, 0x4e, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x73, 0x70,
	0x72, 0x63, 0x49, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x73,
	0x70, 0x72, 0x63, 0x49, 0x64, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x75, 0x63, 0x54, 0x70,
	0x43, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6c, 0x75, 0x63, 0x54, 0x70,
	0x43, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6d, 0x70, 0x70, 0x72, 0x65, 0x76, 0x64, 0x64, 0x49,
	0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6d, 0x70, 0x70, 0x72, 0x65,
	0x76, 0x64, 0x64, 0x49, 0x64, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x75, 0x63, 0x52, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x66, 0x6c, 0x75, 0x63, 0x52, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x70, 0x6e, 0x70, 0x72, 0x63, 0x49, 0x64, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6f, 0x70, 0x6e, 0x70, 0x72, 0x63, 0x49, 0x64, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x67, 0x70, 0x72, 0x63, 0x49, 0x64, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x68, 0x67, 0x70, 0x72, 0x63, 0x49, 0x64, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x77, 0x70, 0x72,
	0x63, 0x49, 0x64, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x77, 0x70, 0x72,
	0x63, 0x49, 0x64, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x54, 0x72, 0x64, 0x76, 0x6f,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x63, 0x54, 0x72, 0x64, 0x76,
	0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x54, 0x72, 0x64, 0x76, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x54, 0x72, 0x64, 0x76, 0x61, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6b, 0x74, 0x63, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6d, 0x6b, 0x74, 0x63, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x22, 0x93, 0x04, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x6c, 0x75, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x6c, 0x75, 0x63, 0x74, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x61, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x2a, 0xe8, 0x01, 0x0a, 0x07, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x49, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x5f, 0x46, 0x6f, 0x6f, 0x74, 0x6e, 0x6f, 0x74, 0x65, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x54, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21,
	0x54, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x70, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x55, 0x6e, 0x70, 0x61, 0x69,
	0x64, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x5f, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x55, 0x6e, 0x70, 0x61, 0x69, 0x64, 0x10, 0x04, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x5f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x42, 0x6f, 0x6e,
	0x64, 0x55, 0x6e, 0x70, 0x61, 0x69, 0x64, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x5f, 0x44,
	0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x5f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x5f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10,
	0x0a, 0x42, 0x0e, 0x5a, 0x0c, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_proto_rawDescOnce sync.Once
	file_protocol_proto_rawDescData = file_protocol_proto_rawDesc
)

func file_protocol_proto_rawDescGZIP() []byte {
	file_protocol_proto_rawDescOnce.Do(func() {
		file_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_proto_rawDescData)
	})
	return file_protocol_proto_rawDescData
}

var file_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_protocol_proto_goTypes = []interface{}{
	(TopicId)(0),                            // 0: TopicId
	(*Report)(nil),                          // 1: Report
	(*Footnote)(nil),                        // 2: Footnote
	(*Bond)(nil),                            // 3: Bond
	(*CommercialPaperSecuritiesUnpaid)(nil), // 4: CommercialPaperSecuritiesUnpaid
	(*CorporateBondUnpaid)(nil),             // 5: CorporateBondUnpaid
	(*ShortTermBondUnpaid)(nil),             // 6: ShortTermBondUnpaid
	(*Disclosure)(nil),                      // 7: Disclosure
	(*Indices)(nil),                         // 8: Indices
	(*IndexComposition)(nil),                // 9: IndexComposition
	(*IndexPrice)(nil),                      // 10: IndexPrice
	(*Price)(nil),                           // 11: Price
}
var file_protocol_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protocol_proto_init() }
func file_protocol_proto_init() {
	if File_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Footnote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommercialPaperSecuritiesUnpaid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorporateBondUnpaid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortTermBondUnpaid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disclosure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Indices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexComposition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocol_proto_goTypes,
		DependencyIndexes: file_protocol_proto_depIdxs,
		EnumInfos:         file_protocol_proto_enumTypes,
		MessageInfos:      file_protocol_proto_msgTypes,
	}.Build()
	File_protocol_proto = out.File
	file_protocol_proto_rawDesc = nil
	file_protocol_proto_goTypes = nil
	file_protocol_proto_depIdxs = nil
}
